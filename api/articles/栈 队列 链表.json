{"title":"","slug":"栈 队列 链表","date":"2021-07-04T07:13:20.579Z","updated":"2021-07-04T07:31:38.309Z","comments":true,"path":"api/articles/栈 队列 链表.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"栈、队列、链表\"><a href=\"#栈、队列、链表\" class=\"headerlink\" title=\"栈、队列、链表\"></a>栈、队列、链表</h1><h2 id=\"第-1-节-解密-QQ-号——队列\"><a href=\"#第-1-节-解密-QQ-号——队列\" class=\"headerlink\" title=\"第 1 节 解密 QQ 号——队列\"></a>第 1 节 解密 QQ 号——队列</h2><p> 其实解密的过程就像是将这些数“排队”。每次从最前面拿两个，第 1 个扔掉，第 2 个放到尾部</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t\t\t</span>&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> q[<span class=\"number\">102</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>&#125;,head,tail; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> i; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//初始化队列 </span></span><br><span class=\"line\">\t\t\thead=<span class=\"number\">1</span>; </span><br><span class=\"line\">\t\t\ttail=<span class=\"number\">10</span>; <span class=\"comment\">//队列中已经有9个元素了，tail指向队尾的后一个位置 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(head&lt;tail) <span class=\"comment\">//当队列不为空的时候执行循环 </span></span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打印队首并将队首出队 </span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[head]); </span><br><span class=\"line\">\t\t\thead++; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//先将新队首的数添加到队尾 </span></span><br><span class=\"line\">\t\t\tq[tail]=q[head]; </span><br><span class=\"line\">\t\t\ttail++; </span><br><span class=\"line\">\t\t\t<span class=\"number\">7</span><span class=\"comment\">//再将队首出队 </span></span><br><span class=\"line\">\t\t\thead++; </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">getchar</span>();<span class=\"built_in\">getchar</span>(); </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>对常用方法体进行封装  封装式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> </span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span> </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data[<span class=\"number\">100</span>];<span class=\"comment\">//队列的主体，用来存储内容 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> head;<span class=\"comment\">//队首 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tail;<span class=\"comment\">//队尾 </span></span><br><span class=\"line\">\t&#125;; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> <span class=\"title\">q</span>;</span> </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i; </span><br><span class=\"line\">\t<span class=\"comment\">//初始化队列 </span></span><br><span class=\"line\">\tq.head=<span class=\"number\">1</span>; </span><br><span class=\"line\">\tq.tail=<span class=\"number\">1</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">9</span>;i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//依次向队列插入9个数 </span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q.data[q.tail]); </span><br><span class=\"line\">\tq.tail++; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q.head&lt;q.tail) <span class=\"comment\">//当队列不为空的时候执行循环 </span></span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//打印队首并将队首出队 </span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q.data[q.head]); </span><br><span class=\"line\">\tq.head++; </span><br><span class=\"line\">\t<span class=\"comment\">//先将新队首的数添加到队尾 </span></span><br><span class=\"line\">\tq.data[q.tail]=q.data[q.head]; </span><br><span class=\"line\">\tq.tail++; </span><br><span class=\"line\">\t<span class=\"comment\">//再将队首出队 </span></span><br><span class=\"line\">\tq.head++; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\tgetchar();getchar(); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"第-2-节-解密回文——栈\"><a href=\"#第-2-节-解密回文——栈\" class=\"headerlink\" title=\"第 2 节 解密回文——栈\"></a>第 2 节 解密回文——栈</h2><p> 通过栈这个数据结构我们将很容易判断一个字符串是否为回文。</p>\n<p>首先我们需要读取这行字符串，并求出这个字符串的长度</p>\n<p>  栈究竟有哪些作用呢？我们来看一个例子。“xyzyx”是一个回文字符串，所谓回文字符 </p>\n<p>串就是指正读反读均相同的字符序列，如“席主席”、“记书记”、“aha”和“ahaha”均是回 </p>\n<p>文，但“ahah”不是回文。通过栈这个数据结构我们将很容易判断一个字符串是否为回文。 </p>\n<p>首先我们需要读取这行字符串，并求出这个字符串的长度。</p>\n<p>char a[101]; </p>\n<p>int len; </p>\n<p>gets(a); </p>\n<p>len=strlen(a);</p>\n<p>如果一个字符串是回文的话，那么它必须是中间对称的，我们需要求中点，即：</p>\n<p>mid=len/2-1;</p>\n<p>接下来就轮到栈出场了。 </p>\n<p>我们先将 mid 之前的字符全部入栈。因为这里的栈是用来存储字符的，所以这里用来实 </p>\n<p>现栈的数组类型是字符数组即 char s[101];，初始化栈很简单，top=0;就可以了。入栈的操作 </p>\n<p>是top++; s[top]=x; （假设需要入栈的字符暂存在字符变量x中），其实可以简写为s[++top]=x;。 </p>\n<p>现在我们就来将 mid 之前的字符依次全部入栈。 </p>\n<p>for(i=0;i&lt;=mid;i++)</p>\n<p>{ </p>\n<p>s[++top]=a[i];</p>\n<p>} </p>\n<p>接下来进入判断回文的关键步骤。将当前栈中的字符依次出栈，看看是否能与 mid 之后 </p>\n<p>的字符一一匹配，如果都能匹配则说明这个字符串是回文字符串，否则这个字符串就不是回</p>\n<p>文字符串。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=mid+<span class=\"number\">1</span>;i&lt;=len<span class=\"number\">-1</span>;i++) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (a[i]!=s[top]) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"keyword\">break</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">top--; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(top==<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO&quot;</span>); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>最后如果 top 的值为 0，就说明栈内所有的字符都被一一匹配了，那么这个字符串就是 </p>\n<p>回文字符串。完整的代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">101</span>],s[<span class=\"number\">101</span>]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> i,len,mid,next,top; </span><br><span class=\"line\">gets(a); <span class=\"comment\">//读入一行字符串 </span></span><br><span class=\"line\">len=<span class=\"built_in\">strlen</span>(a); <span class=\"comment\">//求字符串的长度 </span></span><br><span class=\"line\">mid=len/<span class=\"number\">2</span><span class=\"number\">-1</span>; <span class=\"comment\">//求字符串的中点 </span></span><br><span class=\"line\">top=<span class=\"number\">0</span>;<span class=\"comment\">//栈的初始化 </span></span><br><span class=\"line\"><span class=\"comment\">//将mid前的字符依次入栈 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;=mid;i++) </span><br><span class=\"line\">s[++top]=a[i]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断字符串的长度是奇数还是偶数，并找出需要进行字符匹配的起始下标 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(len%<span class=\"number\">2</span>==<span class=\"number\">0</span>) </span><br><span class=\"line\">next=mid+<span class=\"number\">1</span>; </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">next=mid+<span class=\"number\">2</span>; </span><br><span class=\"line\"><span class=\"comment\">//开始匹配 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=next;i&lt;=len<span class=\"number\">-1</span>;i++)  </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(a[i]!=s[top]) </span><br><span class=\"line\"><span class=\"keyword\">break</span>; </span><br><span class=\"line\">top--; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//如果top的值为0，则说明栈内所有的字符都被一一匹配了 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(top==<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO&quot;</span>); </span><br><span class=\"line\">getchar();getchar(); </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>可以输入以下数据进行验证。</p>\n<p>ahaha </p>\n<p>运行结果是： </p>\n<p>YES </p>\n<p>  栈还可以用来进行验证括号的匹配。比如输入一行只包含“()[]{}”的字符串，请判断 </p>\n<p>形如“([{}()])”或者“{()[]{}}”的是否可以正确匹配。显然上面两个例子都是可以正确匹 </p>\n<p>配的。“([)]”是不能匹配的。有兴趣的同学可以自己动手来试一试。 </p>\n<p>  堆栈最早由 Alan M. Turing（艾伦·图灵）于 1946 年提出，当时是为了解决子程序的调 </p>\n<p>用和返回。艾伦·图灵这个大帅哥可是个大牛人，图灵奖就是以他的名字命名的。如果你对</p>\n<p>他感兴趣不妨去读一读《艾伦·图灵传：如谜的解谜者》和《图灵的秘密》。</p>\n<h2 id=\"第-3-节-纸牌游戏——小猫钓鱼\"><a href=\"#第-3-节-纸牌游戏——小猫钓鱼\" class=\"headerlink\" title=\"第 3 节 纸牌游戏——小猫钓鱼\"></a>第 3 节 纸牌游戏——小猫钓鱼</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> data[<span class=\"number\">1000</span>]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> head; </span><br><span class=\"line\"><span class=\"keyword\">int</span> tail; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> data[<span class=\"number\">10</span>]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> top; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> <span class=\"title\">q1</span>,<span class=\"title\">q2</span>;</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack</span> <span class=\"title\">s</span>;</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> book[<span class=\"number\">10</span>]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> i,t; </span><br><span class=\"line\"><span class=\"comment\">//初始化队列 </span></span><br><span class=\"line\">q1.head=<span class=\"number\">1</span>; q1.tail=<span class=\"number\">1</span>; </span><br><span class=\"line\">q2.head=<span class=\"number\">1</span>; q2.tail=<span class=\"number\">1</span>; </span><br><span class=\"line\"><span class=\"comment\">//初始化栈 </span></span><br><span class=\"line\">s.top=<span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"comment\">//初始化用来标记的数组，用来标记哪些牌已经在桌上 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">9</span>;i++) </span><br><span class=\"line\">book[i]=<span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"comment\">//依次向队列插入6个数 </span></span><br><span class=\"line\"><span class=\"comment\">//小哼手上的6张牌 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">6</span>;i++) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q1.data[q1.tail]); </span><br><span class=\"line\">q1.tail++; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//小哈手上的6张牌 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">6</span>;i++) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q2.data[q2.tail]); </span><br><span class=\"line\">q2.tail++; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">while</span>(q1.head&lt;q1.tail &amp;&amp; q2.head&lt;q2.tail ) <span class=\"comment\">//当队列不为空的时候执行循环 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">t=q1.data[q1.head];<span class=\"comment\">//小哼出一张牌 </span></span><br><span class=\"line\"><span class=\"comment\">//判断小哼当前打出的牌是否能赢牌 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(book[t]==<span class=\"number\">0</span>) <span class=\"comment\">//表明桌上没有牌面为t的牌 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"comment\">//小哼此轮没有赢牌 </span></span><br><span class=\"line\">q1.head++; <span class=\"comment\">//小哼已经打出一张牌，所以要把打出的牌出队 </span></span><br><span class=\"line\">s.top++; </span><br><span class=\"line\">s.data[s.top]=t; <span class=\"comment\">//再把打出的牌放到桌上，即入栈 </span></span><br><span class=\"line\">book[t]=<span class=\"number\">1</span>; <span class=\"comment\">//标记桌上现在已经有牌面为t的牌 </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"comment\">//小哼此轮可以赢牌 </span></span><br><span class=\"line\">q1.head++;<span class=\"comment\">//小哼已经打出一张牌，所以要把打出的牌出队 </span></span><br><span class=\"line\">q1.data[q1.tail]=t;<span class=\"comment\">//紧接着把打出的牌放到手中牌的末尾 </span></span><br><span class=\"line\">q1.tail++; </span><br><span class=\"line\"><span class=\"keyword\">while</span>(s.data[s.top]!=t) <span class=\"comment\">//把桌上可以赢得的牌依次放到手中牌的末尾 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">book[s.data[s.top]]=<span class=\"number\">0</span>;<span class=\"comment\">//取消标记 </span></span><br><span class=\"line\">q1.data[q1.tail]=s.data[s.top];<span class=\"comment\">//依次放入队尾 </span></span><br><span class=\"line\">q1.tail++; </span><br><span class=\"line\">s.top--; <span class=\"comment\">//栈中少了一张牌，所以栈顶要减1 </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">t=q2.data[q2.head]; <span class=\"comment\">//小哈出一张牌 </span></span><br><span class=\"line\"><span class=\"comment\">//判断小哈当前打出的牌是否能赢牌 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(book[t]==<span class=\"number\">0</span>) <span class=\"comment\">//表明桌上没有牌面为t的牌 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"comment\">//小哈此轮没有赢牌 </span></span><br><span class=\"line\">q2.head++; <span class=\"comment\">//小哈已经打出一张牌，所以要把打出的牌出队 </span></span><br><span class=\"line\">s.top++; </span><br><span class=\"line\">s.data[s.top]=t; <span class=\"comment\">//再把打出的牌放到桌上，即入栈 </span></span><br><span class=\"line\">book[t]=<span class=\"number\">1</span>; <span class=\"comment\">//标记桌上现在已经有牌面为t的牌 </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"comment\">//小哈此轮可以赢牌 </span></span><br><span class=\"line\">q2.head++;<span class=\"comment\">//小哈已经打出一张牌，所以要把打出的牌出队 </span></span><br><span class=\"line\">q2.data[q2.tail]=t;<span class=\"comment\">//紧接着把打出的牌放到手中牌的末尾 </span></span><br><span class=\"line\">q2.tail++; </span><br><span class=\"line\"><span class=\"keyword\">while</span>(s.data[s.top]!=t) <span class=\"comment\">//把桌上可以赢得的牌依次放到手中牌的末尾 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">book[s.data[s.top]]=<span class=\"number\">0</span>;<span class=\"comment\">//取消标记第 2 章 栈、队列、链表 </span></span><br><span class=\"line\">q2.data[q2.tail]=s.data[s.top];<span class=\"comment\">//依次放入队尾 </span></span><br><span class=\"line\">q2.tail++; </span><br><span class=\"line\">s.top--; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(q2.head==q2.tail) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;小哼win\\n&quot;</span>); </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;小哼当前手中的牌是&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=q1.head;i&lt;=q1.tail<span class=\"number\">-1</span>;i++) </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>,q1.data[i]); </span><br><span class=\"line\"><span class=\"keyword\">if</span>(s.top&gt;<span class=\"number\">0</span>) <span class=\"comment\">//如果桌上有牌则依次输出桌上的牌 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n桌上的牌是&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=s.top;i++) </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>,s.data[i]); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n桌上已经没有牌了&quot;</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;小哈win\\n&quot;</span>); </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;小哈当前手中的牌是&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=q2.head;i&lt;=q2.tail<span class=\"number\">-1</span>;i++) </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>,q2.data[i]); </span><br><span class=\"line\"><span class=\"keyword\">if</span>(s.top&gt;<span class=\"number\">0</span>) <span class=\"comment\">//如果桌上有牌则依次输出桌上的牌 </span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n桌上的牌是&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=s.top;i++) </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>,s.data[i]); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n桌上已经没有牌了&quot;</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">getchar();getchar(); </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"第-4-节-链表\"><a href=\"#第-4-节-链表\" class=\"headerlink\" title=\"第 4 节 链表\"></a>第 4 节 链表</h2><p>指针有什么作用呢？答案是：存储一个地址。确切地说是存储一个内存空间的</p>\n<p>地址，比如说整型变量 a 的地址。严格地说这里的指针 p 也只能存储“一个存放整数的内存 </p>\n<p>空间”的地址，因为在定义的时候我们已经限制了这一点（即定义的时候*p 的前面是 int）。 </p>\n<p>当然你也可以定义一个只能用来存储“一个存放浮点数的内存空间”的地址，例如：</p>\n<p>double *p; </p>\n<p> 简单地说，指针就是用来存储地址的。你可能要问：不就是存储地址嘛，地址不都一样 </p>\n<p>吗，为什么还要分不同类型的指针呢？不要着急，待会后面再解释。接下来需要解决的一个</p>\n<p>问题：整型指针 p 如何才能存储整型变量 a 的地址呢？很简单，如下： </p>\n<p>p=&a;</p>\n<p>&amp;这个符号很熟悉吧，就是经常在 scanf 函数中用到的&amp;。&amp;叫取地址符。这样整型指针</p>\n<p>p 就获得了（存储了）整型变量 a 的地址，我们可以形象地理解整型指针 p 指向了整型变量 </p>\n<p>a。p 指向了 a 之后，有什么用呢？用处就是我们可以用指针 p 来操作变量 a 了。比如我们可 </p>\n<p>以通过操作指针 p 来输出变量 a 的值，如下： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\"></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">int a=10; </span><br><span class=\"line\"></span><br><span class=\"line\">int *p; //定义-个指针p </span><br><span class=\"line\"></span><br><span class=\"line\">p=&amp;a; //指针p获取变量a的地址 </span><br><span class=\"line\"></span><br><span class=\"line\">printf(&quot;%d&quot;,*p); //输出指针p所指向的内存中的值 </span><br><span class=\"line\"></span><br><span class=\"line\">getchar();getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">return 0; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里 printf 语句里面<em>p 中的</em>号叫做间接运算符，作用是取得指针 p 所指向的内存中的 </p>\n<p>值。在 C 语言中*号有三个用途，分别是： </p>\n<p>\\1. 乘号，用做乘法运算，例如 5*6。 </p>\n<p>\\2. 申明一个指针，在定义指针变量时使用，例如 int *p;。 </p>\n<p>\\3. 间接运算符，取得指针所指向的内存中的值，例如 printf(“%d”,*p);。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p; <span class=\"comment\">//定义一个指针p </span></span><br><span class=\"line\"></span><br><span class=\"line\">p=(<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)); <span class=\"comment\">//指针p获取动态分配的内存空间地址 </span></span><br><span class=\"line\"></span><br><span class=\"line\">*p=<span class=\"number\">10</span>; <span class=\"comment\">//向指针p所指向的内存空间中存入10 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,*p); <span class=\"comment\">//输出指针p所指向的内存中的值 </span></span><br><span class=\"line\"></span><br><span class=\"line\">getchar();getchar();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"comment\">//这里创建一个结构体用来表示链表的结点类型 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>, *<span class=\"title\">p</span>, *<span class=\"title\">q</span>, *<span class=\"title\">t</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, n, a;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\thead = <span class=\"literal\">NULL</span>;<span class=\"comment\">//头指针初始为空 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++)<span class=\"comment\">//循环读入n个数 </span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\">\t\t<span class=\"comment\">//动态申请一个空间，用来存放一个结点，并用临时指针p指向这个结点 </span></span><br><span class=\"line\">\t\tp = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">\t\tp-&gt;data = a;<span class=\"comment\">//将数据存储到当前结点的data域中 </span></span><br><span class=\"line\">\t\tp-&gt;next = <span class=\"literal\">NULL</span>;<span class=\"comment\">//设置当前结点的后继指针指向空，也就是当前结点的下一个结点为空 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\thead = p;<span class=\"comment\">//如果这是第一个创建的结点，则将头指针指向这个结点 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tq-&gt;next = p;<span class=\"comment\">//如果不是第一个创建的结点，则将上一个结点的后继指针指向当前结点</span></span><br><span class=\"line\">\t\tq = p;<span class=\"comment\">//指针q也指向当前结点 </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);<span class=\"comment\">//读入待插入的数 </span></span><br><span class=\"line\">\tt = head;<span class=\"comment\">//从链表头部开始遍历 </span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (t != <span class=\"literal\">NULL</span>)<span class=\"comment\">//当没有到达链表尾部的时候循环 </span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t-&gt;next-&gt;data &gt; a)<span class=\"comment\">//如果当前结点下一个结点的值大于待插入数，将数插入到中间 </span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tp = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));<span class=\"comment\">//动态申请一个空间， 用来存放新增结点</span></span><br><span class=\"line\">\t\t\t\tp-&gt;data = a;</span><br><span class=\"line\">\t\t\tp-&gt;next = t-&gt;next;<span class=\"comment\">//新增结点的后继指针指向当前结点的后继指针所指向的结点 </span></span><br><span class=\"line\">\t\t\tt-&gt;next = p;<span class=\"comment\">//当前结点的后继指针指向新增结点 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//插入完毕退出循环 </span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt = t-&gt;next;<span class=\"comment\">//继续下一个结点 </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//输出链表中的所有数 </span></span><br><span class=\"line\">\tt = head;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (t != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t-&gt;data);</span><br><span class=\"line\">\t\tt = t-&gt;next;<span class=\"comment\">//继续下一个结点 </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgetchar(); getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"第-5-节-模拟链表\"><a href=\"#第-5-节-模拟链表\" class=\"headerlink\" title=\"第 5 节 模拟链表\"></a>第 5 节 模拟链表</h2><p><strong>例如</strong> <strong>right[1]</strong> <strong>的值为</strong> <strong>2</strong>，就表示当前序列中 <strong>1</strong> <strong>号元素右边的元素存放在</strong> <strong>data[2]<strong>中；如果是 <strong>0</strong>，例如</strong>right[9]</strong></p>\n<p><strong>的值为</strong> <strong>0</strong>，就表示当前序列中<strong>9</strong> <strong>号元素的右边没有元素</strong></p>\n<p>**data  ** <strong>里面放值</strong> right 里面放其该值的下一个值的地址，这样就可以直接根据right里面的值去找数了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data[<span class=\"number\">101</span>], right[<span class=\"number\">101</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i, n, t, len;</span><br><span class=\"line\">\t<span class=\"comment\">//读入已有的数 </span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;data[i]);</span><br><span class=\"line\">\tlen = n;</span><br><span class=\"line\">\t<span class=\"comment\">//初始化数组right </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i != n)</span><br><span class=\"line\">\t\t\tright[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tright[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//直接在数组data的末尾增加一个数 </span></span><br><span class=\"line\">\tlen++;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;data[len]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从链表的头部开始遍历 </span></span><br><span class=\"line\">\tt = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (t != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (data[right[t]] &gt; data[len])<span class=\"comment\">//如果当前结点下一个结点的值大于待插入数，将数插入到中间</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tright[len] = right[t];<span class=\"comment\">//新插入数的下一个结点标号等于当前结点的下一个结点编号</span></span><br><span class=\"line\">\t\tright[t] = len;<span class=\"comment\">//当前结点的下一个结点编号就是新插入数的编号 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//插入完成跳出循环 </span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt = right[t];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//输出链表中所有的数 </span></span><br><span class=\"line\">\tt = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (t != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, data[t]);</span><br><span class=\"line\">\t\tt = right[t];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[]}