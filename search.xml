<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2021/06/16/test%20/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/07/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="最快最简单的排序——桶排序"><a href="#最快最简单的排序——桶排序" class="headerlink" title="最快最简单的排序——桶排序"></a>最快最简单的排序——桶排序</h2><p>对11个数进行排序申请一个大小为11的数组int a[11] </p>
<p>例：当 开始出现第一个分数 为5 时在a[5]的值  从0改为1  表示五分出现过一次</p>
<p>当第二次出现5时 a[5]加一   </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>], i, j, t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化为0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行计数 例如当出现5时在a[5]上加一</span></span><br><span class="line"></span><br><span class="line">a[t]++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= a[i]; j++)  </span><br><span class="line"></span><br><span class="line"><span class="comment">//例如当输入2时 a[2] = 1 因为j= a[2]= 1 ; 然后打印一个2；</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="第-2-节-邻居好说话——冒泡排序"><a href="#第-2-节-邻居好说话——冒泡排序" class="headerlink" title="第 2 节 邻居好说话——冒泡排序"></a>第 2 节 邻居好说话——冒泡排序</h2><p>​        冒泡排序的基本思想是：每次比较两个相邻的元素，如果它们的顺序错误就把它们交换</p>
<p>过来。(进行比大小，从大到小排列时 两个数进行比较如果前一个数比后一个打则交换位置)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">100</span>], i, j, t, n;</span><br><span class="line">	cin &gt;&gt; n; <span class="comment">//输入一个数n，表示接下来有n个数</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//循环读入n个数到数组a中</span></span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//冒泡排序的核心部分</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) <span class="comment">//n个数排序，只用进行n-1趟</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n - i; j++) <span class="comment">////比较在剩余值里面的其余值&#123;</span></span><br><span class="line">			<span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) <span class="comment">//比较大小并交换</span></span><br><span class="line">			&#123;</span><br><span class="line">			t = a[j]; a[j] = a[j + <span class="number">1</span>]; a[j + <span class="number">1</span>] = t;</span><br><span class="line">		 &#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//输出结果</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; a[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="最常用的排序——快速排序"><a href="#最常用的排序——快速排序" class="headerlink" title="最常用的排序——快速排序"></a>最常用的排序——快速排序</h2><p>​        分别从初始序列“6 1 2 7 9 3 4 5 10 8”两端开始“探测”。先从 </p>
<p>​        右往左找一个小于 6 的数，再从左往右找一个大于 6 的数，然后交换它们。这里可以用两个 </p>
<p>变量 <em>i</em> 和 <em>j</em>，分别指向序列最左边和最右边。我们为这两个变量起个好听的名字“哨兵 <em>i</em>”和 </p>
<p>“哨兵 <em>j</em>”。刚开始的时候让哨兵 <em>i</em> 指向序列的最左边（即 <em>i</em>=1），指向数字 6。让哨兵 <em>j</em> 指向序 </p>
<p>列的最右边（即 <em>j</em>=10），指向数字 8。</p>
<p> 首先在这个序列中随便找一个数作为基准数（不要被这个名词吓到了，这就是一个用来参照的数，</p>
<p>​         因此快速排序的最差时间复杂度和冒泡排序是一样的，都是 <em>O</em>(<em>N</em>2)，它的平均时间复杂度为 <em>O</em> (<em>N</em>log<em>N</em>)。其实快速排序是基于一 种叫做“二分”的思想。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">101</span>], n;<span class="comment">//定义全局变量，这两个变量需要在子函数中使用 </span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i, j, t, temp;</span><br><span class="line">		<span class="keyword">if</span> (left &gt; right)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		temp = a[left]; <span class="comment">//temp中存的就是基准数 </span></span><br><span class="line">		i = left;</span><br><span class="line">		j = right;</span><br><span class="line">		<span class="keyword">while</span> (i != j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//顺序很重要，要先从右往左找 </span></span><br><span class="line">			<span class="keyword">while</span> (a[j] &gt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">				j--;</span><br><span class="line">			<span class="comment">//再从左往右找 </span></span><br><span class="line">			<span class="keyword">while</span> (a[i] &lt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">				i++;</span><br><span class="line">			<span class="comment">//交换两个数在数组中的位置 </span></span><br><span class="line">			<span class="keyword">if</span> (i &lt; j)<span class="comment">//当哨兵i和哨兵j没有相遇时</span></span><br><span class="line">			&#123;</span><br><span class="line">				t = a[i];</span><br><span class="line">				a[i] = a[j];</span><br><span class="line">				a[j] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//最终将基准数归位 </span></span><br><span class="line">		</span><br><span class="line">			a[left] = a[i];</span><br><span class="line">		    a[i] = temp;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">quicksort</span>(left, i - <span class="number">1</span>);<span class="comment">//继续处理左边的，这里是一个递归的过程 </span></span><br><span class="line">		<span class="built_in">quicksort</span>(i + <span class="number">1</span>, right);<span class="comment">//继续处理右边的，这里是一个递归的过程 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i, j, t;</span><br><span class="line">		<span class="comment">//读入数据 </span></span><br><span class="line">		cin &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			cin &gt;&gt; a[i];</span><br><span class="line">		<span class="built_in">quicksort</span>(<span class="number">1</span>, n); <span class="comment">//快速排序调用 </span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//输出排序后的结果 </span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="小哼买书"><a href="#小哼买书" class="headerlink" title="小哼买书"></a>小哼买书</h2><p>​        第一种方法：先将这 <em>n</em> 个图书的 ISBN 号去重，再进 </p>
<p>行从小到大排序并输出；第二种方法：先从小到大排序，输出的时候再去重。这两种方法都</p>
<p>可以。 </p>
<p>  先来看第一种方法。通过第一节的学习我们发现，桶排序稍加改动正好可以起到去重的</p>
<p>  效果，因此我们可以使用桶排序的方法来解决此问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">1001</span>], i, j, t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>;i++) &#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= t;i++ ) &#123;</span><br><span class="line">		cin &gt;&gt; j;</span><br><span class="line">		a[j] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">1</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
