{"meta":{"title":"王向前的博客","subtitle":"我是测试副标题","description":"发布笔记。。。","author":"王向前的博客","url":"https://iquu.cc","root":"/"},"pages":[{"title":"tags","date":"2021-07-04T06:07:02.000Z","updated":"2021-07-04T06:07:33.708Z","comments":true,"path":"tags/index.html","permalink":"https://iquu.cc/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"排序算法","date":"2021-07-04T04:17:33.125Z","updated":"2021-07-04T04:51:50.753Z","comments":true,"path":"2021/07/04/排序算法/","link":"","permalink":"https://iquu.cc/2021/07/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","excerpt":"","text":"排序最快最简单的排序——桶排序对11个数进行排序申请一个大小为11的数组int a[11] 例：当 开始出现第一个分数 为5 时在a[5]的值 从0改为1 表示五分出现过一次 当第二次出现5时 a[5]加一 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;using namespace std;int main()&#123;int a[11], i, j, t;for (i = 0; i &lt;= 10; i++) &#123;a[i] = 0;//初始化为0&#125;for (i = 1; i &lt;= 5; i++) &#123;cin &gt;&gt; t;//进行计数 例如当出现5时在a[5]上加一a[t]++;&#125;for (i = 0; i &lt;= 10; i++) &#123;for (j = 1; j &lt;= a[i]; j++) //例如当输入2时 a[2] = 1 因为j= a[2]= 1 ; 然后打印一个2；cout &lt;&lt; &quot; &quot; &lt;&lt; i;&#125;return 0;&#125; 第 2 节 邻居好说话——冒泡排序​ 冒泡排序的基本思想是：每次比较两个相邻的元素，如果它们的顺序错误就把它们交换 过来。(进行比大小，从大到小排列时 两个数进行比较如果前一个数比后一个打则交换位置) 123456789101112131415161718192021222324#include&lt;iostream&gt;using namespace std;int main()&#123; int a[100], i, j, t, n; cin &gt;&gt; n; //输入一个数n，表示接下来有n个数 for (i = 1; i &lt;= n; i++) //循环读入n个数到数组a中 cin &gt;&gt; a[i]; //冒泡排序的核心部分 for (i = 1; i &lt;= n - 1; i++) //n个数排序，只用进行n-1趟 &#123; for (j = 1; j &lt;= n - i; j++) ////比较在剩余值里面的其余值&#123; if (a[j] &lt; a[j + 1]) //比较大小并交换 &#123; t = a[j]; a[j] = a[j + 1]; a[j + 1] = t; &#125; &#125; &#125; for (i = 1; i &lt;= n; i++) //输出结果 cout &lt;&lt; &quot; &quot;&lt;&lt; a[i]; return 0;&#125; 最常用的排序——快速排序​ 分别从初始序列“6 1 2 7 9 3 4 5 10 8”两端开始“探测”。先从 ​ 右往左找一个小于 6 的数，再从左往右找一个大于 6 的数，然后交换它们。这里可以用两个 变量 i 和 j，分别指向序列最左边和最右边。我们为这两个变量起个好听的名字“哨兵 i”和 “哨兵 j”。刚开始的时候让哨兵 i 指向序列的最左边（即 i=1），指向数字 6。让哨兵 j 指向序 列的最右边（即 j=10），指向数字 8。 首先在这个序列中随便找一个数作为基准数（不要被这个名词吓到了，这就是一个用来参照的数， ​ 因此快速排序的最差时间复杂度和冒泡排序是一样的，都是 O(N2)，它的平均时间复杂度为 O (NlogN)。其实快速排序是基于一 种叫做“二分”的思想。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;using namespace std; int a[101], n;//定义全局变量，这两个变量需要在子函数中使用 void quicksort(int left, int right) &#123; int i, j, t, temp; if (left &gt; right) return; temp = a[left]; //temp中存的就是基准数 i = left; j = right; while (i != j) &#123; //顺序很重要，要先从右往左找 while (a[j] &gt;= temp &amp;&amp; i &lt; j) j--; //再从左往右找 while (a[i] &lt;= temp &amp;&amp; i &lt; j) i++; //交换两个数在数组中的位置 if (i &lt; j)//当哨兵i和哨兵j没有相遇时 &#123; t = a[i]; a[i] = a[j]; a[j] = t; &#125; &#125; //最终将基准数归位 a[left] = a[i]; a[i] = temp; quicksort(left, i - 1);//继续处理左边的，这里是一个递归的过程 quicksort(i + 1, right);//继续处理右边的，这里是一个递归的过程 &#125; int main() &#123; int i, j, t; //读入数据 cin &gt;&gt; n; for (i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; quicksort(1, n); //快速排序调用 //输出排序后的结果 for (i = 1; i &lt;= n; i++) cout &lt;&lt; &quot; &quot; &lt;&lt; a[i]; return 0;&#125; 小哼买书​ 第一种方法：先将这 n 个图书的 ISBN 号去重，再进 行从小到大排序并输出；第二种方法：先从小到大排序，输出的时候再去重。这两种方法都 可以。 先来看第一种方法。通过第一节的学习我们发现，桶排序稍加改动正好可以起到去重的 效果，因此我们可以使用桶排序的方法来解决此问题 1234567891011121314151617181920#include&lt;iostream&gt;using namespace std;int main() &#123; int a[1001], i, j, t; for (i = 1; i &lt;= 1000;i++) &#123; a[i] = 0; &#125; cin &gt;&gt; t; for (i = 1; i &lt;= t;i++ ) &#123; cin &gt;&gt; j; a[j] = 1; &#125; for (i = 1; i &lt; 1000; i++) &#123; if (a[i] == 1) &#123; cout &lt;&lt; &quot; &quot;&lt;&lt; i; &#125; &#125; return 0;&#125;","categories":[],"tags":[]},{"title":"test","slug":"test ","date":"2021-06-16T15:31:03.684Z","updated":"2021-06-16T15:31:29.052Z","comments":true,"path":"2021/06/16/test /","link":"","permalink":"https://iquu.cc/2021/06/16/test%20/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}